{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b42e2411",
   "metadata": {},
   "outputs": [],
   "source": [
    "# we will apply the dataset and preprocessing to it and will applicate it on 5 models out of 8 and \n",
    "# we will apply to each model grid search "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cd02188a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-12-25T05:05:08.694182100Z",
     "start_time": "2023-12-25T05:05:08.680546300Z"
    }
   },
   "outputs": [],
   "source": [
    "#loading the needed librarys\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a5930330",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-12-25T05:05:11.522858300Z",
     "start_time": "2023-12-25T05:05:11.451134500Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>...</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.359807</td>\n",
       "      <td>-0.072781</td>\n",
       "      <td>2.536347</td>\n",
       "      <td>1.378155</td>\n",
       "      <td>-0.338321</td>\n",
       "      <td>0.462388</td>\n",
       "      <td>0.239599</td>\n",
       "      <td>0.098698</td>\n",
       "      <td>0.363787</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.018307</td>\n",
       "      <td>0.277838</td>\n",
       "      <td>-0.110474</td>\n",
       "      <td>0.066928</td>\n",
       "      <td>0.128539</td>\n",
       "      <td>-0.189115</td>\n",
       "      <td>0.133558</td>\n",
       "      <td>-0.021053</td>\n",
       "      <td>149.62</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.191857</td>\n",
       "      <td>0.266151</td>\n",
       "      <td>0.166480</td>\n",
       "      <td>0.448154</td>\n",
       "      <td>0.060018</td>\n",
       "      <td>-0.082361</td>\n",
       "      <td>-0.078803</td>\n",
       "      <td>0.085102</td>\n",
       "      <td>-0.255425</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.225775</td>\n",
       "      <td>-0.638672</td>\n",
       "      <td>0.101288</td>\n",
       "      <td>-0.339846</td>\n",
       "      <td>0.167170</td>\n",
       "      <td>0.125895</td>\n",
       "      <td>-0.008983</td>\n",
       "      <td>0.014724</td>\n",
       "      <td>2.69</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.358354</td>\n",
       "      <td>-1.340163</td>\n",
       "      <td>1.773209</td>\n",
       "      <td>0.379780</td>\n",
       "      <td>-0.503198</td>\n",
       "      <td>1.800499</td>\n",
       "      <td>0.791461</td>\n",
       "      <td>0.247676</td>\n",
       "      <td>-1.514654</td>\n",
       "      <td>...</td>\n",
       "      <td>0.247998</td>\n",
       "      <td>0.771679</td>\n",
       "      <td>0.909412</td>\n",
       "      <td>-0.689281</td>\n",
       "      <td>-0.327642</td>\n",
       "      <td>-0.139097</td>\n",
       "      <td>-0.055353</td>\n",
       "      <td>-0.059752</td>\n",
       "      <td>378.66</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.966272</td>\n",
       "      <td>-0.185226</td>\n",
       "      <td>1.792993</td>\n",
       "      <td>-0.863291</td>\n",
       "      <td>-0.010309</td>\n",
       "      <td>1.247203</td>\n",
       "      <td>0.237609</td>\n",
       "      <td>0.377436</td>\n",
       "      <td>-1.387024</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.108300</td>\n",
       "      <td>0.005274</td>\n",
       "      <td>-0.190321</td>\n",
       "      <td>-1.175575</td>\n",
       "      <td>0.647376</td>\n",
       "      <td>-0.221929</td>\n",
       "      <td>0.062723</td>\n",
       "      <td>0.061458</td>\n",
       "      <td>123.50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>-1.158233</td>\n",
       "      <td>0.877737</td>\n",
       "      <td>1.548718</td>\n",
       "      <td>0.403034</td>\n",
       "      <td>-0.407193</td>\n",
       "      <td>0.095921</td>\n",
       "      <td>0.592941</td>\n",
       "      <td>-0.270533</td>\n",
       "      <td>0.817739</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.009431</td>\n",
       "      <td>0.798278</td>\n",
       "      <td>-0.137458</td>\n",
       "      <td>0.141267</td>\n",
       "      <td>-0.206010</td>\n",
       "      <td>0.502292</td>\n",
       "      <td>0.219422</td>\n",
       "      <td>0.215153</td>\n",
       "      <td>69.99</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284802</th>\n",
       "      <td>172786.0</td>\n",
       "      <td>-11.881118</td>\n",
       "      <td>10.071785</td>\n",
       "      <td>-9.834783</td>\n",
       "      <td>-2.066656</td>\n",
       "      <td>-5.364473</td>\n",
       "      <td>-2.606837</td>\n",
       "      <td>-4.918215</td>\n",
       "      <td>7.305334</td>\n",
       "      <td>1.914428</td>\n",
       "      <td>...</td>\n",
       "      <td>0.213454</td>\n",
       "      <td>0.111864</td>\n",
       "      <td>1.014480</td>\n",
       "      <td>-0.509348</td>\n",
       "      <td>1.436807</td>\n",
       "      <td>0.250034</td>\n",
       "      <td>0.943651</td>\n",
       "      <td>0.823731</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284803</th>\n",
       "      <td>172787.0</td>\n",
       "      <td>-0.732789</td>\n",
       "      <td>-0.055080</td>\n",
       "      <td>2.035030</td>\n",
       "      <td>-0.738589</td>\n",
       "      <td>0.868229</td>\n",
       "      <td>1.058415</td>\n",
       "      <td>0.024330</td>\n",
       "      <td>0.294869</td>\n",
       "      <td>0.584800</td>\n",
       "      <td>...</td>\n",
       "      <td>0.214205</td>\n",
       "      <td>0.924384</td>\n",
       "      <td>0.012463</td>\n",
       "      <td>-1.016226</td>\n",
       "      <td>-0.606624</td>\n",
       "      <td>-0.395255</td>\n",
       "      <td>0.068472</td>\n",
       "      <td>-0.053527</td>\n",
       "      <td>24.79</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284804</th>\n",
       "      <td>172788.0</td>\n",
       "      <td>1.919565</td>\n",
       "      <td>-0.301254</td>\n",
       "      <td>-3.249640</td>\n",
       "      <td>-0.557828</td>\n",
       "      <td>2.630515</td>\n",
       "      <td>3.031260</td>\n",
       "      <td>-0.296827</td>\n",
       "      <td>0.708417</td>\n",
       "      <td>0.432454</td>\n",
       "      <td>...</td>\n",
       "      <td>0.232045</td>\n",
       "      <td>0.578229</td>\n",
       "      <td>-0.037501</td>\n",
       "      <td>0.640134</td>\n",
       "      <td>0.265745</td>\n",
       "      <td>-0.087371</td>\n",
       "      <td>0.004455</td>\n",
       "      <td>-0.026561</td>\n",
       "      <td>67.88</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284805</th>\n",
       "      <td>172788.0</td>\n",
       "      <td>-0.240440</td>\n",
       "      <td>0.530483</td>\n",
       "      <td>0.702510</td>\n",
       "      <td>0.689799</td>\n",
       "      <td>-0.377961</td>\n",
       "      <td>0.623708</td>\n",
       "      <td>-0.686180</td>\n",
       "      <td>0.679145</td>\n",
       "      <td>0.392087</td>\n",
       "      <td>...</td>\n",
       "      <td>0.265245</td>\n",
       "      <td>0.800049</td>\n",
       "      <td>-0.163298</td>\n",
       "      <td>0.123205</td>\n",
       "      <td>-0.569159</td>\n",
       "      <td>0.546668</td>\n",
       "      <td>0.108821</td>\n",
       "      <td>0.104533</td>\n",
       "      <td>10.00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284806</th>\n",
       "      <td>172792.0</td>\n",
       "      <td>-0.533413</td>\n",
       "      <td>-0.189733</td>\n",
       "      <td>0.703337</td>\n",
       "      <td>-0.506271</td>\n",
       "      <td>-0.012546</td>\n",
       "      <td>-0.649617</td>\n",
       "      <td>1.577006</td>\n",
       "      <td>-0.414650</td>\n",
       "      <td>0.486180</td>\n",
       "      <td>...</td>\n",
       "      <td>0.261057</td>\n",
       "      <td>0.643078</td>\n",
       "      <td>0.376777</td>\n",
       "      <td>0.008797</td>\n",
       "      <td>-0.473649</td>\n",
       "      <td>-0.818267</td>\n",
       "      <td>-0.002415</td>\n",
       "      <td>0.013649</td>\n",
       "      <td>217.00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>284807 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Time         V1         V2        V3        V4        V5  \\\n",
       "0            0.0  -1.359807  -0.072781  2.536347  1.378155 -0.338321   \n",
       "1            0.0   1.191857   0.266151  0.166480  0.448154  0.060018   \n",
       "2            1.0  -1.358354  -1.340163  1.773209  0.379780 -0.503198   \n",
       "3            1.0  -0.966272  -0.185226  1.792993 -0.863291 -0.010309   \n",
       "4            2.0  -1.158233   0.877737  1.548718  0.403034 -0.407193   \n",
       "...          ...        ...        ...       ...       ...       ...   \n",
       "284802  172786.0 -11.881118  10.071785 -9.834783 -2.066656 -5.364473   \n",
       "284803  172787.0  -0.732789  -0.055080  2.035030 -0.738589  0.868229   \n",
       "284804  172788.0   1.919565  -0.301254 -3.249640 -0.557828  2.630515   \n",
       "284805  172788.0  -0.240440   0.530483  0.702510  0.689799 -0.377961   \n",
       "284806  172792.0  -0.533413  -0.189733  0.703337 -0.506271 -0.012546   \n",
       "\n",
       "              V6        V7        V8        V9  ...       V21       V22  \\\n",
       "0       0.462388  0.239599  0.098698  0.363787  ... -0.018307  0.277838   \n",
       "1      -0.082361 -0.078803  0.085102 -0.255425  ... -0.225775 -0.638672   \n",
       "2       1.800499  0.791461  0.247676 -1.514654  ...  0.247998  0.771679   \n",
       "3       1.247203  0.237609  0.377436 -1.387024  ... -0.108300  0.005274   \n",
       "4       0.095921  0.592941 -0.270533  0.817739  ... -0.009431  0.798278   \n",
       "...          ...       ...       ...       ...  ...       ...       ...   \n",
       "284802 -2.606837 -4.918215  7.305334  1.914428  ...  0.213454  0.111864   \n",
       "284803  1.058415  0.024330  0.294869  0.584800  ...  0.214205  0.924384   \n",
       "284804  3.031260 -0.296827  0.708417  0.432454  ...  0.232045  0.578229   \n",
       "284805  0.623708 -0.686180  0.679145  0.392087  ...  0.265245  0.800049   \n",
       "284806 -0.649617  1.577006 -0.414650  0.486180  ...  0.261057  0.643078   \n",
       "\n",
       "             V23       V24       V25       V26       V27       V28  Amount  \\\n",
       "0      -0.110474  0.066928  0.128539 -0.189115  0.133558 -0.021053  149.62   \n",
       "1       0.101288 -0.339846  0.167170  0.125895 -0.008983  0.014724    2.69   \n",
       "2       0.909412 -0.689281 -0.327642 -0.139097 -0.055353 -0.059752  378.66   \n",
       "3      -0.190321 -1.175575  0.647376 -0.221929  0.062723  0.061458  123.50   \n",
       "4      -0.137458  0.141267 -0.206010  0.502292  0.219422  0.215153   69.99   \n",
       "...          ...       ...       ...       ...       ...       ...     ...   \n",
       "284802  1.014480 -0.509348  1.436807  0.250034  0.943651  0.823731    0.77   \n",
       "284803  0.012463 -1.016226 -0.606624 -0.395255  0.068472 -0.053527   24.79   \n",
       "284804 -0.037501  0.640134  0.265745 -0.087371  0.004455 -0.026561   67.88   \n",
       "284805 -0.163298  0.123205 -0.569159  0.546668  0.108821  0.104533   10.00   \n",
       "284806  0.376777  0.008797 -0.473649 -0.818267 -0.002415  0.013649  217.00   \n",
       "\n",
       "        Class  \n",
       "0           0  \n",
       "1           0  \n",
       "2           0  \n",
       "3           0  \n",
       "4           0  \n",
       "...       ...  \n",
       "284802      0  \n",
       "284803      0  \n",
       "284804      0  \n",
       "284805      0  \n",
       "284806      0  \n",
       "\n",
       "[284807 rows x 31 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Loading the dataset\n",
    "df = pd.read_csv(r'churn-bigml-80.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "a9251d76",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-12-25T05:05:20.194501700Z",
     "start_time": "2023-12-25T05:05:19.803652500Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ploting the dataset to show if there is null values in the features or not, blue mean non null and yellow is null\n",
    "# but showing this plot mean the dataset doesn't have null values in all features\n",
    "sns.heatmap(tr.isnull(),yticklabels= False,cbar=False,cmap='cividis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "30654188",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2666 entries, 0 to 2665\n",
      "Data columns (total 20 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   State                   2666 non-null   object \n",
      " 1   Account length          2666 non-null   int64  \n",
      " 2   Area code               2666 non-null   int64  \n",
      " 3   International plan      2666 non-null   object \n",
      " 4   Voice mail plan         2666 non-null   object \n",
      " 5   Number vmail messages   2666 non-null   int64  \n",
      " 6   Total day minutes       2666 non-null   float64\n",
      " 7   Total day calls         2666 non-null   int64  \n",
      " 8   Total day charge        2666 non-null   float64\n",
      " 9   Total eve minutes       2666 non-null   float64\n",
      " 10  Total eve calls         2666 non-null   int64  \n",
      " 11  Total eve charge        2666 non-null   float64\n",
      " 12  Total night minutes     2666 non-null   float64\n",
      " 13  Total night calls       2666 non-null   int64  \n",
      " 14  Total night charge      2666 non-null   float64\n",
      " 15  Total intl minutes      2666 non-null   float64\n",
      " 16  Total intl calls        2666 non-null   int64  \n",
      " 17  Total intl charge       2666 non-null   float64\n",
      " 18  Customer service calls  2666 non-null   int64  \n",
      " 19  Churn                   2666 non-null   bool   \n",
      "dtypes: bool(1), float64(8), int64(8), object(3)\n",
      "memory usage: 398.5+ KB\n"
     ]
    }
   ],
   "source": [
    "# shows The columns in the dataframe and the number of entries (rows ) and their indices and shows the type of each column and number of Null value and Non-Null\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96741a5b-f20b-436f-8b59-76d95a4a7e2a",
   "metadata": {},
   "source": [
    "# Data Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28730c62-d4c3-448d-b3f8-8f60415bb1c9",
   "metadata": {},
   "source": [
    "# Categorical to Numerical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "44254dd7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-12-25T05:14:35.530598Z",
     "start_time": "2023-12-25T05:14:35.476318800Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Account length  Area code  Number vmail messages  Total day minutes  \\\n",
      "0             128        415                     25              265.1   \n",
      "1             107        415                     26              161.6   \n",
      "2             137        415                      0              243.4   \n",
      "3              84        408                      0              299.4   \n",
      "4              75        415                      0              166.7   \n",
      "\n",
      "   Total day calls  Total day charge  Total eve minutes  Total eve calls  \\\n",
      "0              110             45.07              197.4               99   \n",
      "1              123             27.47              195.5              103   \n",
      "2              114             41.38              121.2              110   \n",
      "3               71             50.90               61.9               88   \n",
      "4              113             28.34              148.3              122   \n",
      "\n",
      "   Total eve charge  Total night minutes  ...  State_WA  State_WI  State_WV  \\\n",
      "0             16.78                244.7  ...         0         0         0   \n",
      "1             16.62                254.4  ...         0         0         0   \n",
      "2             10.30                162.6  ...         0         0         0   \n",
      "3              5.26                196.9  ...         0         0         0   \n",
      "4             12.61                186.9  ...         0         0         0   \n",
      "\n",
      "   State_WY  International plan_No  International plan_Yes  \\\n",
      "0         0                      1                       0   \n",
      "1         0                      1                       0   \n",
      "2         0                      1                       0   \n",
      "3         0                      0                       1   \n",
      "4         0                      0                       1   \n",
      "\n",
      "   Voice mail plan_No  Voice mail plan_Yes  Churn_False  Churn_True  \n",
      "0                   0                    1            1           0  \n",
      "1                   0                    1            1           0  \n",
      "2                   1                    0            1           0  \n",
      "3                   1                    0            1           0  \n",
      "4                   1                    0            1           0  \n",
      "\n",
      "[5 rows x 73 columns]\n",
      "{'State': {'KS': 'AK', 'OH': 'AL', 'NJ': 'AR', 'OK': 'AZ', 'AL': 'CA', 'MA': 'CO', 'MO': 'CT', 'WV': 'DC', 'RI': 'DE', 'IA': 'FL', 'MT': 'GA', 'ID': 'HI', 'VT': 'IA', 'VA': 'ID', 'TX': 'IL', 'FL': 'IN', 'CO': 'KS', 'AZ': 'KY', 'NE': 'LA', 'WY': 'MA', 'IL': 'MD', 'NH': 'ME', 'LA': 'MI', 'GA': 'MN', 'AK': 'MO', 'MD': 'MS', 'AR': 'MT', 'WI': 'NC', 'OR': 'ND', 'DE': 'NE', 'IN': 'NH', 'UT': 'NJ', 'CA': 'NM', 'SD': 'NV', 'NC': 'NY', 'WA': 'OH', 'MN': 'OK', 'NM': 'OR', 'NV': 'PA', 'DC': 'RI', 'NY': 'SC', 'KY': 'SD', 'ME': 'TN', 'MS': 'TX', 'MI': 'UT', 'SC': 'VA', 'TN': 'VT', 'PA': 'WA', 'HI': 'WI', 'ND': 'WV', 'CT': 'WY'}, 'International plan': {'No': 'No', 'Yes': 'Yes'}, 'Voice mail plan': {'Yes': 'No', 'No': 'Yes'}, 'Churn': {False: 'False', True: 'True'}}\n"
     ]
    }
   ],
   "source": [
    "# turning on the categorical features into numerical features\n",
    "categorical_cols = ['State', 'International plan', 'Voice mail plan', 'Churn']  # Add the names of your categorical columns\n",
    "\n",
    "# Create a dictionary to store the mappings between original values and encoded numeric values\n",
    "mapping_dict = {}\n",
    "\n",
    "# Apply one-hot encoding to the categorical columns\n",
    "data_encoded = pd.get_dummies(df, columns=categorical_cols)\n",
    "\n",
    "# Retrieve the original non-numeric values for each encoded column\n",
    "for col in categorical_cols:\n",
    "    encoded_cols = [c for c in data_encoded.columns if col in c]\n",
    "    original_values = df[col].unique()\n",
    "    encoded_values = [c.split('_')[1] for c in encoded_cols]\n",
    "    mapping_dict[col] = dict(zip(original_values, encoded_values))\n",
    "\n",
    "# Print the encoded dataset\n",
    "print(data_encoded.head())\n",
    "\n",
    "# Print the mapping dictionary\n",
    "print(mapping_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "7d1950d0",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-12-25T05:14:36.495613200Z",
     "start_time": "2023-12-25T05:14:36.424686600Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2666 entries, 0 to 2665\n",
      "Data columns (total 73 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   Account length          2666 non-null   int64  \n",
      " 1   Area code               2666 non-null   int64  \n",
      " 2   Number vmail messages   2666 non-null   int64  \n",
      " 3   Total day minutes       2666 non-null   float64\n",
      " 4   Total day calls         2666 non-null   int64  \n",
      " 5   Total day charge        2666 non-null   float64\n",
      " 6   Total eve minutes       2666 non-null   float64\n",
      " 7   Total eve calls         2666 non-null   int64  \n",
      " 8   Total eve charge        2666 non-null   float64\n",
      " 9   Total night minutes     2666 non-null   float64\n",
      " 10  Total night calls       2666 non-null   int64  \n",
      " 11  Total night charge      2666 non-null   float64\n",
      " 12  Total intl minutes      2666 non-null   float64\n",
      " 13  Total intl calls        2666 non-null   int64  \n",
      " 14  Total intl charge       2666 non-null   float64\n",
      " 15  Customer service calls  2666 non-null   int64  \n",
      " 16  State_AK                2666 non-null   uint8  \n",
      " 17  State_AL                2666 non-null   uint8  \n",
      " 18  State_AR                2666 non-null   uint8  \n",
      " 19  State_AZ                2666 non-null   uint8  \n",
      " 20  State_CA                2666 non-null   uint8  \n",
      " 21  State_CO                2666 non-null   uint8  \n",
      " 22  State_CT                2666 non-null   uint8  \n",
      " 23  State_DC                2666 non-null   uint8  \n",
      " 24  State_DE                2666 non-null   uint8  \n",
      " 25  State_FL                2666 non-null   uint8  \n",
      " 26  State_GA                2666 non-null   uint8  \n",
      " 27  State_HI                2666 non-null   uint8  \n",
      " 28  State_IA                2666 non-null   uint8  \n",
      " 29  State_ID                2666 non-null   uint8  \n",
      " 30  State_IL                2666 non-null   uint8  \n",
      " 31  State_IN                2666 non-null   uint8  \n",
      " 32  State_KS                2666 non-null   uint8  \n",
      " 33  State_KY                2666 non-null   uint8  \n",
      " 34  State_LA                2666 non-null   uint8  \n",
      " 35  State_MA                2666 non-null   uint8  \n",
      " 36  State_MD                2666 non-null   uint8  \n",
      " 37  State_ME                2666 non-null   uint8  \n",
      " 38  State_MI                2666 non-null   uint8  \n",
      " 39  State_MN                2666 non-null   uint8  \n",
      " 40  State_MO                2666 non-null   uint8  \n",
      " 41  State_MS                2666 non-null   uint8  \n",
      " 42  State_MT                2666 non-null   uint8  \n",
      " 43  State_NC                2666 non-null   uint8  \n",
      " 44  State_ND                2666 non-null   uint8  \n",
      " 45  State_NE                2666 non-null   uint8  \n",
      " 46  State_NH                2666 non-null   uint8  \n",
      " 47  State_NJ                2666 non-null   uint8  \n",
      " 48  State_NM                2666 non-null   uint8  \n",
      " 49  State_NV                2666 non-null   uint8  \n",
      " 50  State_NY                2666 non-null   uint8  \n",
      " 51  State_OH                2666 non-null   uint8  \n",
      " 52  State_OK                2666 non-null   uint8  \n",
      " 53  State_OR                2666 non-null   uint8  \n",
      " 54  State_PA                2666 non-null   uint8  \n",
      " 55  State_RI                2666 non-null   uint8  \n",
      " 56  State_SC                2666 non-null   uint8  \n",
      " 57  State_SD                2666 non-null   uint8  \n",
      " 58  State_TN                2666 non-null   uint8  \n",
      " 59  State_TX                2666 non-null   uint8  \n",
      " 60  State_UT                2666 non-null   uint8  \n",
      " 61  State_VA                2666 non-null   uint8  \n",
      " 62  State_VT                2666 non-null   uint8  \n",
      " 63  State_WA                2666 non-null   uint8  \n",
      " 64  State_WI                2666 non-null   uint8  \n",
      " 65  State_WV                2666 non-null   uint8  \n",
      " 66  State_WY                2666 non-null   uint8  \n",
      " 67  International plan_No   2666 non-null   uint8  \n",
      " 68  International plan_Yes  2666 non-null   uint8  \n",
      " 69  Voice mail plan_No      2666 non-null   uint8  \n",
      " 70  Voice mail plan_Yes     2666 non-null   uint8  \n",
      " 71  Churn_False             2666 non-null   uint8  \n",
      " 72  Churn_True              2666 non-null   uint8  \n",
      "dtypes: float64(8), int64(8), uint8(57)\n",
      "memory usage: 481.8 KB\n"
     ]
    }
   ],
   "source": [
    "# showing information about the dataframe\n",
    "df = pd.DataFrame.from_dict(data_encoded)\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "c48df566-2a7a-4b7b-9c83-25590b5d2cc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2666 entries, 0 to 2665\n",
      "Data columns (total 70 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   Account length          2666 non-null   int64  \n",
      " 1   Area code               2666 non-null   int64  \n",
      " 2   Number vmail messages   2666 non-null   int64  \n",
      " 3   Total day minutes       2666 non-null   float64\n",
      " 4   Total day calls         2666 non-null   int64  \n",
      " 5   Total day charge        2666 non-null   float64\n",
      " 6   Total eve minutes       2666 non-null   float64\n",
      " 7   Total eve calls         2666 non-null   int64  \n",
      " 8   Total eve charge        2666 non-null   float64\n",
      " 9   Total night minutes     2666 non-null   float64\n",
      " 10  Total night calls       2666 non-null   int64  \n",
      " 11  Total night charge      2666 non-null   float64\n",
      " 12  Total intl minutes      2666 non-null   float64\n",
      " 13  Total intl calls        2666 non-null   int64  \n",
      " 14  Total intl charge       2666 non-null   float64\n",
      " 15  Customer service calls  2666 non-null   int64  \n",
      " 16  State_AK                2666 non-null   uint8  \n",
      " 17  State_AL                2666 non-null   uint8  \n",
      " 18  State_AR                2666 non-null   uint8  \n",
      " 19  State_AZ                2666 non-null   uint8  \n",
      " 20  State_CA                2666 non-null   uint8  \n",
      " 21  State_CO                2666 non-null   uint8  \n",
      " 22  State_CT                2666 non-null   uint8  \n",
      " 23  State_DC                2666 non-null   uint8  \n",
      " 24  State_DE                2666 non-null   uint8  \n",
      " 25  State_FL                2666 non-null   uint8  \n",
      " 26  State_GA                2666 non-null   uint8  \n",
      " 27  State_HI                2666 non-null   uint8  \n",
      " 28  State_IA                2666 non-null   uint8  \n",
      " 29  State_ID                2666 non-null   uint8  \n",
      " 30  State_IL                2666 non-null   uint8  \n",
      " 31  State_IN                2666 non-null   uint8  \n",
      " 32  State_KS                2666 non-null   uint8  \n",
      " 33  State_KY                2666 non-null   uint8  \n",
      " 34  State_LA                2666 non-null   uint8  \n",
      " 35  State_MA                2666 non-null   uint8  \n",
      " 36  State_MD                2666 non-null   uint8  \n",
      " 37  State_ME                2666 non-null   uint8  \n",
      " 38  State_MI                2666 non-null   uint8  \n",
      " 39  State_MN                2666 non-null   uint8  \n",
      " 40  State_MO                2666 non-null   uint8  \n",
      " 41  State_MS                2666 non-null   uint8  \n",
      " 42  State_MT                2666 non-null   uint8  \n",
      " 43  State_NC                2666 non-null   uint8  \n",
      " 44  State_ND                2666 non-null   uint8  \n",
      " 45  State_NE                2666 non-null   uint8  \n",
      " 46  State_NH                2666 non-null   uint8  \n",
      " 47  State_NJ                2666 non-null   uint8  \n",
      " 48  State_NM                2666 non-null   uint8  \n",
      " 49  State_NV                2666 non-null   uint8  \n",
      " 50  State_NY                2666 non-null   uint8  \n",
      " 51  State_OH                2666 non-null   uint8  \n",
      " 52  State_OK                2666 non-null   uint8  \n",
      " 53  State_OR                2666 non-null   uint8  \n",
      " 54  State_PA                2666 non-null   uint8  \n",
      " 55  State_RI                2666 non-null   uint8  \n",
      " 56  State_SC                2666 non-null   uint8  \n",
      " 57  State_SD                2666 non-null   uint8  \n",
      " 58  State_TN                2666 non-null   uint8  \n",
      " 59  State_TX                2666 non-null   uint8  \n",
      " 60  State_UT                2666 non-null   uint8  \n",
      " 61  State_VA                2666 non-null   uint8  \n",
      " 62  State_VT                2666 non-null   uint8  \n",
      " 63  State_WA                2666 non-null   uint8  \n",
      " 64  State_WI                2666 non-null   uint8  \n",
      " 65  State_WV                2666 non-null   uint8  \n",
      " 66  State_WY                2666 non-null   uint8  \n",
      " 67  International plan_Yes  2666 non-null   uint8  \n",
      " 68  Voice mail plan_Yes     2666 non-null   uint8  \n",
      " 69  Churn_True              2666 non-null   uint8  \n",
      "dtypes: float64(8), int64(8), uint8(54)\n",
      "memory usage: 474.0 KB\n"
     ]
    }
   ],
   "source": [
    "# dropping the repeative features from the dataframe\n",
    "df = df.drop(['International plan_No', 'Voice mail plan_No', 'Churn_False'], axis=1)\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c985af27",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "9e255ffb",
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_list_accuracy = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "a5464047",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-12-25T05:21:14.855869500Z",
     "start_time": "2023-12-25T05:21:14.729675700Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8875"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# KNN model\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "\n",
    "# Preparing the dataset: separate features and target variable\n",
    "features = df.drop('Churn_True', axis=1)  # Independent variables (excluding 'Churn')\n",
    "target = df['Churn_True']                 # Dependent variable (target for prediction)\n",
    "\n",
    "# Splitting the dataset into training and testing sets\n",
    "# 20% of data is used for testing, 80% for training. Random state ensures reproducible splits\n",
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=5)\n",
    "# Initializing the KNN classifier with 179 neighbors\n",
    "\n",
    "knn = KNeighborsClassifier(n_neighbors=15, metric_params=None, leaf_size=40, n_jobs=None, )\n",
    "\n",
    "# Training the KNN classifier on the training data\n",
    "knn.fit(X_train, y_train)\n",
    "\n",
    "# Making predictions on the test dataset\n",
    "y_pred = knn.predict(X_test)\n",
    "\n",
    "# accuracy = accuracy_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "250692fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8875]"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_list_accuracy.append(accuracy)\n",
    "knn_list_accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "238ebbbb",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-12-25T05:21:16.769922400Z",
     "start_time": "2023-12-25T05:21:16.745804300Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[683   3]\n",
      " [ 87  27]]\n"
     ]
    }
   ],
   "source": [
    "# Printing the confusion matrix to evaluate the performance of the classification\n",
    "print(confusion_matrix(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "04f031bc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-12-25T05:21:21.104605800Z",
     "start_time": "2023-12-25T05:21:21.057979400Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      1.00      0.94       686\n",
      "           1       0.90      0.24      0.38       114\n",
      "\n",
      "    accuracy                           0.89       800\n",
      "   macro avg       0.89      0.62      0.66       800\n",
      "weighted avg       0.89      0.89      0.86       800\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Calculate accuracy\n",
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "095c771a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'algorithm': 'auto', 'n_neighbors': 15, 'weights': 'distance'}"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# using Gridsearch for best performancing model\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "numbers = list(range(1, 301))\n",
    "param_grid = {'n_neighbors': numbers,\n",
    "            'weights': ['uniform', 'distance'],\n",
    "            'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute']} \n",
    "grid = GridSearchCV(KNeighborsClassifier(),param_grid,cv=5)\n",
    "grid.fit(X_train,y_train)\n",
    "grid.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c42b4d02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=15, weights='distance')"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "32d127f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[683   3]\n",
      " [ 87  27]]\n"
     ]
    }
   ],
   "source": [
    "grid_predictions = grid.predict(X_test)\n",
    "print(confusion_matrix(y_test,grid_predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "05799419",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8875"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy = accuracy_score(y_test, grid_predictions)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "27c8f626",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      1.00      0.94       686\n",
      "           1       0.90      0.24      0.38       114\n",
      "\n",
      "    accuracy                           0.89       800\n",
      "   macro avg       0.89      0.62      0.66       800\n",
      "weighted avg       0.89      0.89      0.86       800\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,grid_predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "502f67fa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "id": "26a627de",
   "metadata": {},
   "outputs": [],
   "source": [
    "RandomForest_list_accuracy = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "id": "a548752b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-12-25T05:20:43.929802100Z",
     "start_time": "2023-12-25T05:20:43.730573800Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8951310861423221"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# RandomForest model\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "\n",
    "# Load your dataset and split into features and target variable\n",
    "# Preparing the dataset: separate into features and target variable\n",
    "features = df.drop('Churn_True', axis=1)  # Independent variables\n",
    "target = df['Churn_True']                 # Dependent variable (target for prediction)\n",
    "\n",
    "# Splitting the dataset into training and testing sets\n",
    "# 20% of data is used for testing, 80% for training. Random state ensures reproducible splits\n",
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=41)\n",
    "\n",
    "# Setting up the RandomForestClassifier with specific parameters\n",
    "rf = RandomForestClassifier(n_estimators=100, criterion = 'entropy' , min_samples_leaf = 7 , max_depth = 7)\n",
    "\n",
    "# Training the RandomForest model on the training data\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "# Making predictions on the test dataset\n",
    "y_pred = rf.predict(X_test)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "id": "04a4e923",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8951310861423221]"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RandomForest_list_accuracy.append(accuracy)\n",
    "RandomForest_list_accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "0ae76ff1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-12-25T05:20:46.963905700Z",
     "start_time": "2023-12-25T05:20:46.902006Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[463   0]\n",
      " [ 56  15]]\n"
     ]
    }
   ],
   "source": [
    "# Printing the confusion matrix to evaluate the performance of the classification\n",
    "print(confusion_matrix(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "cf41956e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-12-25T05:18:50.110891Z",
     "start_time": "2023-12-25T05:18:50.073535500Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      1.00      0.94       463\n",
      "           1       1.00      0.21      0.35        71\n",
      "\n",
      "    accuracy                           0.90       534\n",
      "   macro avg       0.95      0.61      0.65       534\n",
      "weighted avg       0.91      0.90      0.86       534\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Calculate accuracy\n",
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "58c6939c",
   "metadata": {},
   "outputs": [
    {
     "ename": "MemoryError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mMemoryError\u001b[0m                               Traceback (most recent call last)",
      "Input \u001b[1;32mIn [177]\u001b[0m, in \u001b[0;36m<cell line: 10>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      4\u001b[0m param_grid \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mn_estimators\u001b[39m\u001b[38;5;124m'\u001b[39m: numbers,\n\u001b[0;32m      5\u001b[0m             \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrandom_state\u001b[39m\u001b[38;5;124m'\u001b[39m: numbers,\n\u001b[0;32m      6\u001b[0m             \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcriterion\u001b[39m\u001b[38;5;124m'\u001b[39m: [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgini\u001b[39m\u001b[38;5;124m'\u001b[39m],\n\u001b[0;32m      7\u001b[0m             \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmin_samples_leaf\u001b[39m\u001b[38;5;124m'\u001b[39m: numbers,\n\u001b[0;32m      8\u001b[0m             \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmax_depth\u001b[39m\u001b[38;5;124m'\u001b[39m: numbers} \n\u001b[0;32m      9\u001b[0m grid \u001b[38;5;241m=\u001b[39m GridSearchCV(RandomForestClassifier(),param_grid,cv\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m5\u001b[39m)\n\u001b[1;32m---> 10\u001b[0m \u001b[43mgrid\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     11\u001b[0m grid\u001b[38;5;241m.\u001b[39mbest_params_\n",
      "File \u001b[1;32mE:\\progs\\anainst\\lib\\site-packages\\sklearn\\model_selection\\_search.py:891\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[1;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[0;32m    885\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[0;32m    886\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[0;32m    887\u001b[0m     )\n\u001b[0;32m    889\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[1;32m--> 891\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_search\u001b[49m\u001b[43m(\u001b[49m\u001b[43mevaluate_candidates\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    893\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[0;32m    894\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[0;32m    895\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n",
      "File \u001b[1;32mE:\\progs\\anainst\\lib\\site-packages\\sklearn\\model_selection\\_search.py:1392\u001b[0m, in \u001b[0;36mGridSearchCV._run_search\u001b[1;34m(self, evaluate_candidates)\u001b[0m\n\u001b[0;32m   1390\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[0;32m   1391\u001b[0m     \u001b[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001b[39;00m\n\u001b[1;32m-> 1392\u001b[0m     \u001b[43mevaluate_candidates\u001b[49m\u001b[43m(\u001b[49m\u001b[43mParameterGrid\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparam_grid\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mE:\\progs\\anainst\\lib\\site-packages\\sklearn\\model_selection\\_search.py:827\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[1;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[0;32m    825\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mevaluate_candidates\u001b[39m(candidate_params, cv\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, more_results\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[0;32m    826\u001b[0m     cv \u001b[38;5;241m=\u001b[39m cv \u001b[38;5;129;01mor\u001b[39;00m cv_orig\n\u001b[1;32m--> 827\u001b[0m     candidate_params \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcandidate_params\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    828\u001b[0m     n_candidates \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlen\u001b[39m(candidate_params)\n\u001b[0;32m    830\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n",
      "File \u001b[1;32mE:\\progs\\anainst\\lib\\site-packages\\sklearn\\model_selection\\_search.py:135\u001b[0m, in \u001b[0;36mParameterGrid.__iter__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    133\u001b[0m keys, values \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mzip\u001b[39m(\u001b[38;5;241m*\u001b[39mitems)\n\u001b[0;32m    134\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m v \u001b[38;5;129;01min\u001b[39;00m product(\u001b[38;5;241m*\u001b[39mvalues):\n\u001b[1;32m--> 135\u001b[0m     params \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mdict\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mzip\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mkeys\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mv\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    136\u001b[0m     \u001b[38;5;28;01myield\u001b[39;00m params\n",
      "\u001b[1;31mMemoryError\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# using Gridsearch for best performancing model\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "numbers = list(range(1, 21))\n",
    "param_grid = {'n_estimators': numbers,\n",
    "            'random_state': numbers,\n",
    "            'criterion': ['gini', 'entropy'],\n",
    "            'min_samples_leaf': numbers,\n",
    "            'max_depth': numbers} \n",
    "grid = GridSearchCV(RandomForestClassifier(),param_grid,cv=5)\n",
    "grid.fit(X_train,y_train)\n",
    "grid.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b26e6f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# we couldn't apply grid search for RF Due to the limited capabilities of our laptop: Intel(R) Core(TM) i7-4610M CPU @ 3.00GHz and 8.00 GB DDR3 RAM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a96ad821",
   "metadata": {},
   "outputs": [],
   "source": [
    "# when we use grid search in RF we always face memory lack even on high performance computer Intel(R) Core(TM) i5-11400 CPU @ 4.4 GHz and memory 16GB DDR5\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "174c102f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "737661e5-ba21-43a2-baf6-9df3a02a56d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9363295880149812\n"
     ]
    }
   ],
   "source": [
    "# Decision Tree model\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "# Separate features and target variable\n",
    "features = df.drop('Churn_True', axis=1)  # Features\n",
    "target = df['Churn_True']  # Target variable\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=101)\n",
    "\n",
    "# Initialize the Decision Tree classifier with specified parameters\n",
    "dt_classifier = DecisionTreeClassifier(random_state=100, criterion='gini', max_depth=7, min_samples_leaf=10)\n",
    "\n",
    "# Train the classifier\n",
    "dt_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the testing data\n",
    "y_pred = dt_classifier.predict(X_test)\n",
    "\n",
    "# Evaluate the model\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy:\", accuracy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "ffb8dcec-998a-457f-8428-9144055ff008",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[436   5]\n",
      " [ 29  64]]\n"
     ]
    }
   ],
   "source": [
    "# Printing the confusion matrix to evaluate the performance of the classification\n",
    "print(confusion_matrix(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "30781a02-2619-48b1-9313-1140c8a96249",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.99      0.96       441\n",
      "           1       0.93      0.69      0.79        93\n",
      "\n",
      "    accuracy                           0.94       534\n",
      "   macro avg       0.93      0.84      0.88       534\n",
      "weighted avg       0.94      0.94      0.93       534\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Calculate accuracy\n",
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "31a9e059-fd7c-441a-b25f-fdfd58e3226d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'criterion': 'gini',\n",
       " 'max_depth': 7,\n",
       " 'min_samples_leaf': 4,\n",
       " 'random_state': 110}"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#using grid search for performance model\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "numbers = list(range(1, 11))\n",
    "param_grid = {'random_state': [110],\n",
    "              'max_depth' : numbers,\n",
    "              'criterion' : ['gini', 'entropy'],\n",
    "              'min_samples_leaf' :  numbers}\n",
    "grid = GridSearchCV(DecisionTreeClassifier(),param_grid,cv = 5)\n",
    "grid.fit(X_train,y_train)\n",
    "grid.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "fe517259",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(max_depth=7, min_samples_leaf=4, random_state=110)"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "61768fd1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[434   7]\n",
      " [ 33  60]]\n"
     ]
    }
   ],
   "source": [
    "grid_predictions = grid.predict(X_test)\n",
    "print(confusion_matrix(y_test,grid_predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "8770464d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9250936329588015"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy = accuracy_score(y_test, grid_predictions)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "e2b0c0f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.98      0.96       441\n",
      "           1       0.90      0.65      0.75        93\n",
      "\n",
      "    accuracy                           0.93       534\n",
      "   macro avg       0.91      0.81      0.85       534\n",
      "weighted avg       0.92      0.93      0.92       534\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,grid_predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2459edc2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "a1b67ac9-8468-4f4d-a855-0c3d43bfcd8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores: [0.55       0.55       0.7        0.45       0.75       0.4\n",
      " 0.57894737 0.52631579 0.52631579 0.63157895 0.63157895 0.63157895\n",
      " 0.57894737 0.57894737 0.52631579 0.47368421 0.52631579 0.47368421\n",
      " 0.52631579 0.63157895 0.63157895 0.73684211 0.68421053 0.57894737\n",
      " 0.52631579 0.68421053 0.57894737 0.68421053 0.68421053 0.68421053\n",
      " 0.68421053 0.47368421 0.52631579 0.57894737 0.52631579 0.42105263\n",
      " 0.63157895 0.68421053 0.52631579 0.47368421 0.57894737 0.63157895\n",
      " 0.63157895 0.52631579 0.31578947 0.63157895 0.73684211 0.57894737\n",
      " 0.36842105 0.84210526 0.47368421 0.47368421 0.63157895 0.63157895\n",
      " 0.52631579 0.57894737 0.73684211 0.52631579 0.57894737 0.63157895\n",
      " 0.68421053 0.57894737 0.47368421 0.57894737 0.57894737 0.47368421\n",
      " 0.57894737 0.63157895 0.52631579 0.89473684 0.52631579 0.52631579\n",
      " 0.73684211 0.52631579 0.73684211 0.63157895 0.57894737 0.36842105\n",
      " 0.68421053 0.78947368 0.73684211 0.52631579 0.52631579 0.36842105\n",
      " 0.68421053 0.57894737 0.47368421 0.68421053 0.42105263 0.63157895\n",
      " 0.63157895 0.63157895 0.57894737 0.47368421 0.42105263 0.63157895\n",
      " 0.73684211 0.73684211 0.63157895 0.57894737 0.68421053 0.63157895\n",
      " 0.63157895 0.57894737 0.78947368 0.52631579 0.63157895 0.57894737\n",
      " 0.52631579 0.47368421 0.52631579 0.68421053 0.68421053 0.68421053\n",
      " 0.68421053 0.57894737 0.63157895 0.68421053 0.47368421 0.68421053\n",
      " 0.78947368 0.36842105 0.42105263 0.47368421 0.68421053 0.57894737\n",
      " 0.78947368 0.63157895 0.47368421 0.47368421 0.52631579 0.63157895\n",
      " 0.57894737 0.47368421 0.57894737 0.52631579 0.57894737 0.73684211\n",
      " 0.52631579 0.63157895]\n",
      "Max accuracy: 0.8947368421052632\n"
     ]
    }
   ],
   "source": [
    "# Gaussian Naïve Bayes model\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "# Separate features and target variable\n",
    "features = df.drop('Churn_True', axis=1)  # Features\n",
    "target = df['Churn_True']  # Target variable\n",
    "\n",
    "# Initialize the Gaussian Naive Bayes classifier\n",
    "gnb = GaussianNB()\n",
    "\n",
    "# Perform cross-validation\n",
    "cv_scores = cross_val_score(gnb, features, target, cv=140)\n",
    "\n",
    "# Print cross-validation scores\n",
    "print(\"Cross-validation scores:\", cv_scores)\n",
    "print(\"Max accuracy:\", cv_scores.max())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "id": "8287fc68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'priors': None, 'var_smoothing': 1e-07}"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# using grid search for best performance model\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Define the parameter grid\n",
    "param_grid = {'priors': [None, [0.2, 0.8], [0.5, 0.5]],\n",
    "              'var_smoothing': [1e-9, 1e-8, 1e-7]} \n",
    "\n",
    "# Perform grid search\n",
    "grid = GridSearchCV(GaussianNB(),param_grid, cv= 140)\n",
    "grid.fit(X_train,y_train)\n",
    "grid.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "81ce4e68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB(var_smoothing=1e-07)"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "527a86c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.61      0.73       455\n",
      "           1       0.23      0.66      0.34        79\n",
      "\n",
      "    accuracy                           0.62       534\n",
      "   macro avg       0.57      0.64      0.54       534\n",
      "weighted avg       0.81      0.62      0.67       534\n",
      "\n"
     ]
    }
   ],
   "source": [
    "grid_predictions = grid.predict(X_test)\n",
    "print(classification_report(y_test,grid_predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "22b51fc8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6198501872659176"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy = accuracy_score(y_test, grid_predictions)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91b44dbd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "9bf63550",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9550561797752809\n"
     ]
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n",
    "# Separate features and target variable\n",
    "features = df.drop('Churn_True', axis=1)  # Features\n",
    "target = df['Churn_True']  # Target variable\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize the Decision Tree classifier with specified parameters\n",
    "xgb = XGBClassifier(alpha= 0.2)\n",
    "\n",
    "# Train the classifier\n",
    "xgb.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the testing data\n",
    "y_pred = xgb.predict(X_test)\n",
    "\n",
    "# Evaluate the model\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "b4a89367",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'alpha': 0.2}"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "# Define the parameter grid\n",
    "param_grid = {\n",
    "    'alpha' : [None, 0.1, 0.2, 0.3]\n",
    "}\n",
    "# Perform grid search\n",
    "grid = GridSearchCV(xgb, param_grid, cv=5)\n",
    "grid.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters and best score\n",
    "grid.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "389438e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBClassifier(alpha=0.2, base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "              num_parallel_tree=None, ...)"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "fabe7249",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      1.00      0.97       455\n",
      "           1       0.97      0.72      0.83        79\n",
      "\n",
      "    accuracy                           0.96       534\n",
      "   macro avg       0.96      0.86      0.90       534\n",
      "weighted avg       0.96      0.96      0.95       534\n",
      "\n"
     ]
    }
   ],
   "source": [
    "grid_predictions = grid.predict(X_test)\n",
    "print(classification_report(y_test,grid_predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "b303e5e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9550561797752809"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy = accuracy_score(y_test, grid_predictions)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "991596c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# at the end after our work ,i can say in some models we got higher or lower a little bit in the evaluations meterices \n",
    "# for each model and we find out that most the parameters values that is determined in the paper for each model its \n",
    "# not the best in the value maybe because the researchers on the paper the used different methods in preprocessing on\n",
    "# the dataset and the devices the worked on Or perhaps the devices and their different performance that they worked \n",
    "# on were also a reason for the difference in results, evaluations, and values and also some The parameters mentioned\n",
    "# in the paper are not originally available for each model.\n",
    "# in the future we will try to find another methods in preprocessing and models to enhancing the models."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
